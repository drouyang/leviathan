ttcp.c: In function ‘main’:
ttcp.c:242:8: warning: extra tokens at end of #endif directive [enabled by default]
 #endif cray
        ^
ttcp.c:259:22: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   buf +=(bufalign - ((int)buf % bufalign) + bufoffset) % bufalign;
                      ^
ttcp.c: At top level:
ttcp.c:490:8: warning: extra tokens at end of #endif directive [enabled by default]
 #endif SYSV
        ^
ttcp.c: In function ‘prusage’:
ttcp.c:639:8: warning: extra tokens at end of #endif directive [enabled by default]
 #endif !SYSV
        ^
ttcp.c: In function ‘set_options’:
ttcp.c:666:7: warning: extra tokens at end of #else directive [enabled by default]
 #else BSD43
       ^
ttcp.c: In function ‘Nread’:
ttcp.c:731:3: warning: passing argument 2 of ‘recvfrom’ makes pointer from integer without a cast [enabled by default]
   cnt = recvfrom( fd, buf, count, 0, &from, &len );
   ^
In file included from ttcp.c:48:0:
/usr/include/sys/socket.h:175:16: note: expected ‘void * __restrict__’ but argument is of type ‘int’
 extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
                ^
ttcp.c:731:3: warning: passing argument 5 of ‘recvfrom’ from incompatible pointer type [enabled by default]
   cnt = recvfrom( fd, buf, count, 0, &from, &len );
   ^
In file included from ttcp.c:48:0:
/usr/include/sys/socket.h:175:16: note: expected ‘struct sockaddr * __restrict__’ but argument is of type ‘struct sockaddr_in *’
 extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
                ^
ttcp.c: In function ‘Nwrite’:
ttcp.c:752:3: warning: passing argument 2 of ‘sendto’ makes pointer from integer without a cast [enabled by default]
   cnt = sendto( fd, buf, count, 0, &sinhim, sizeof(sinhim) );
   ^
In file included from ttcp.c:48:0:
/usr/include/sys/socket.h:164:16: note: expected ‘const void *’ but argument is of type ‘int’
 extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
                ^
ttcp.c:752:3: warning: passing argument 5 of ‘sendto’ from incompatible pointer type [enabled by default]
   cnt = sendto( fd, buf, count, 0, &sinhim, sizeof(sinhim) );
   ^
In file included from ttcp.c:48:0:
/usr/include/sys/socket.h:164:16: note: expected ‘const struct sockaddr *’ but argument is of type ‘struct sockaddr_in *’
 extern ssize_t sendto (int __fd, const void *__buf, size_t __n,
                ^
ttcp.c: In function ‘delay’:
ttcp.c:772:2: warning: passing argument 2 of ‘select’ from incompatible pointer type [enabled by default]
  (void)select( 1, (char *)0, (char *)0, (char *)0, &tv );
  ^
In file included from /usr/include/sys/types.h:219:0,
                 from ttcp.c:47:
/usr/include/sys/select.h:106:12: note: expected ‘struct fd_set * __restrict__’ but argument is of type ‘char *’
 extern int select (int __nfds, fd_set *__restrict __readfds,
            ^
ttcp.c:772:2: warning: passing argument 3 of ‘select’ from incompatible pointer type [enabled by default]
  (void)select( 1, (char *)0, (char *)0, (char *)0, &tv );
  ^
In file included from /usr/include/sys/types.h:219:0,
                 from ttcp.c:47:
/usr/include/sys/select.h:106:12: note: expected ‘struct fd_set * __restrict__’ but argument is of type ‘char *’
 extern int select (int __nfds, fd_set *__restrict __readfds,
            ^
ttcp.c:772:2: warning: passing argument 4 of ‘select’ from incompatible pointer type [enabled by default]
  (void)select( 1, (char *)0, (char *)0, (char *)0, &tv );
  ^
In file included from /usr/include/sys/types.h:219:0,
                 from ttcp.c:47:
/usr/include/sys/select.h:106:12: note: expected ‘struct fd_set * __restrict__’ but argument is of type ‘char *’
 extern int select (int __nfds, fd_set *__restrict __readfds,
            ^
ttcp.c: At top level:
ttcp.c:813:1: warning: conflicting types for ‘bcopy’ [enabled by default]
 bcopy (src, dst, len)
 ^
ttcp.c:824:1: warning: conflicting types for ‘bzero’ [enabled by default]
 bzero (addr, len)
 ^
/tmp/ccHaZpZR.o: In function `main':
ttcp.c:(.text+0x141b): warning: Using 'gethostbyname' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
ttcp.c:(.text+0x170c): warning: Using 'getprotobyname' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
